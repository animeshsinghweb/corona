{"version":3,"sources":["Map.jsx","App.js","serviceWorker.js","index.js"],"names":["i","mapboxgl","accessToken","Map","props","state","lng","lat","zoom","map","container","this","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","axios","get","res","data","geojson","type","features","country","countryInfo","long","properties","geometry","coordinates","totalDeath","totalConfirmed","forEach","deaths","cases","marker","updatedFormatted","casesString","updated","recovered","todayCases","todayDeaths","slice","Date","toLocaleString","casesToday","deathsToday","deathsPercent","confirmedPercent","recoveredPercent","el","document","createElement","className","flag","markele","Marker","setLngLat","setPopup","Popup","offset","setHTML","addTo","addEventListener","togglePopup","ref","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7d56fd2.chunk.js","sourcesContent":["import React from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport axios from \"axios\";\n\nimport \"./map.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidmlnaG5lc2hkZWVwMjAiLCJhIjoiY2s4ajU3OTR5MDJzNDNocjd0eG9vcG02MCJ9.fpfraPMqhDGWgskVdTn2oQ\";\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 85,\n      lat: 23,\n      zoom: 3,\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      // style: \"mapbox://styles/mapbox/streets-v11\",\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n    });\n\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2),\n      });\n    });\n\n    map.on(\"load\", async () => {\n      const res = await axios.get(\"https://disease.sh/v2/countries\");\n      // const geojson = res.data;\n\n      const { data = [] } = res;\n\n      const geojson = {\n        type: \"FeatureCollection\",\n        features: data.map((country = {}) => {\n          const { countryInfo = {} } = country;\n          const { lat, long: lng } = countryInfo;\n          return {\n            type: \"Feature\",\n            properties: {\n              ...country,\n            },\n            geometry: {\n              type: \"Point\",\n              coordinates: [lng, lat],\n            },\n          };\n        }),\n      };\n\n      let totalDeath = 0,\n        totalConfirmed = 0;\n\n      data.forEach((country) => {\n        totalDeath += country.deaths;\n        totalConfirmed += country.cases;\n      });\n\n      // add markers to map\n      geojson.features.forEach(function (marker) {\n        const { properties = {} } = marker;\n        let updatedFormatted;\n        let casesString;\n\n        const {\n          country,\n          updated,\n          cases,\n          deaths,\n          recovered,\n          todayCases,\n          todayDeaths,\n        } = properties;\n\n        casesString = `${cases}`;\n\n        if (cases > 1000) {\n          casesString = `${casesString.slice(0, -3)}k+`;\n        }\n\n        if (updated) {\n          updatedFormatted = new Date(updated).toLocaleString();\n        }\n\n        let casesToday = \"\",\n          deathsToday = \"\";\n\n        if (deaths > 0) deathsToday = `, <em>${todayDeaths} today</em>`;\n        if (cases > 0) casesToday = `, <em>${todayCases} today</em>`;\n\n        let deathsPercent = ((deaths / totalDeath) * 100).toFixed(2);\n        let confirmedPercent = ((cases / totalConfirmed) * 100).toFixed(2);\n        let recoveredPercent = ((recovered / cases) * 100).toFixed(1);\n\n        // create a HTML element for each feature\n        var el = document.createElement(\"div\");\n        el.className = \"marker\";\n\n        // Comment Line below to show default marker's image\n        //  instead of country's flag\n        el.style = `background-image: url(${properties.countryInfo.flag})`;\n\n        // make a marker for each feature and add to the map\n        const markele = new mapboxgl.Marker(el)\n          .setLngLat(marker.geometry.coordinates)\n          .setPopup(\n            new mapboxgl.Popup({ offset: 25 }) // add popups\n              .setHTML(\n                `\n                  <span class=\"icon-marker-tooltip\">\n                    <h2>${country}</h2>\n                    <p>accounts for <strong>${confirmedPercent}% cases</strong> of the world and <strong>${deathsPercent}% deaths</strong> of the world</p>\n                    <ul>\n                      <li><strong>Confirmed:</strong> ${casesString}${casesToday}</li>\n                      <li><strong>Deaths:</strong> ${deaths}${deathsToday}</li>\n                      <li><strong>Recovered:</strong> ${recovered} <strong>(${recoveredPercent}%)</strong></li>\n                      <li><strong>Last Update:</strong> ${updatedFormatted}</li>\n                    </ul>\n                  </span>\n                `,\n              ),\n          )\n          .addTo(map);\n\n        // show markers on mouse overs\n        el.addEventListener(\"mouseenter\", () => markele.togglePopup());\n        el.addEventListener(\"mouseleave\", () => markele.togglePopup());\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\n            {this.state.zoom}\n          </div>\n        </div> */}\n        <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport Map from \"./Map\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}